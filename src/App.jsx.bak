import React, { useState, useMemo, useEffect, useDeferredValue } from 'react';
import { Search, Download, ChevronDown, ChevronUp, Upload, FileSpreadsheet, Save, Cloud } from 'lucide-react';
import { db } from './firebase';
import { collection, doc, setDoc, getDoc, updateDoc } from 'firebase/firestore';

/** Lightweight local-state text editor to avoid per-keystroke global updates */
const TextCell = React.memo(function TextCell({
  rowKey,
  column,
  initialValue,
  onCommit,
  onCancel,
}) {
  const [draft, setDraft] = React.useState(initialValue ?? "");

  useEffect(() => {
    setDraft(initialValue ?? "");
  }, [initialValue]);

  const commit = () => onCommit(rowKey, column, draft);

  return (
   <textarea
  autoFocus
  value={draft}
  onChange={(e) => setDraft(e.target.value)}
  onBlur={commit}
  onKeyDown={(e) => {
    if (e.key === "Enter" && (e.ctrlKey || e.metaKey)) {
      commit();
    } else if (e.key === "Escape") {
      if (onCancel) onCancel();
    }
  }}
  className="w-full min-h-[60px] p-2 border border-blue-500 rounded focus:outline-none focus:ring-2 focus:ring-blue-500 resize-y"
  style={{ minWidth: "200px" }}
/>
  );
});

const RepairTrackerSheet = () => {
  const [activeTab, setActiveTab] = useState('combined');
  const [searchTerm, setSearchTerm] = useState('');
  const [locationFilter, setLocationFilter] = useState('');
  const [pmFilter, setPmFilter] = useState('');
  const [sortConfig, setSortConfig] = useState({ key: null, direction: 'asc' });
  const [ticketData, setTicketData] = useState([]);
  const [reportData, setReportData] = useState([]);
  const [categoryMapping, setCategoryMapping] = useState([]);
  const [loading, setLoading] = useState(false);
  const [wrapText, setWrapText] = useState(false);
  const [editingCell, setEditingCell] = useState(null);
  const [saving, setSaving] = useState(false);
  const [lastSaved, setLastSaved] = useState(null);
  const [hasUnsavedChanges, setHasUnsavedChanges] = useState(false);
  const [showCategoryManager, setShowCategoryManager] = useState(false);
  const [unmatchedCategories, setUnmatchedCategories] = useState([]);

  useEffect(() => {
    const loadXLSX = async () => {
      if (typeof XLSX !== 'undefined') return;

      const script = document.createElement('script');
      script.src = 'https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js';

      return new Promise((resolve, reject) => {
        script.onload = resolve;
        script.onerror = reject;
        document.head.appendChild(script);
      });
    };

    loadXLSX().catch(err => console.error('Failed to load XLSX:', err));
  }, []);

  const handleFileUpload = async (e, type) => {
    const file = e.target.files[0];
    if (!file) return;

    setLoading(true);
    try {
      if (type === 'mapping') {
        // Handle JSON file upload
        const text = await file.text();
        const jsonData = JSON.parse(text);
        setCategoryMapping(jsonData);
        console.log('Loaded category mapping:', jsonData.length, 'entries');
        alert(`Successfully loaded ${jsonData.length} category mappings`);
        setLoading(false);
        return;
      }

      if (typeof XLSX === 'undefined') {
        alert('Please wait a moment for the library to load and try again');
        setLoading(false);
        return;
      }

      const arrayBuffer = await file.arrayBuffer();
      const workbook = XLSX.read(arrayBuffer, { type: 'array', cellDates: true });

      const rawData = XLSX.utils.sheet_to_json(workbook.Sheets[workbook.SheetNames[0]], {
        header: 1,
        defval: "",
        raw: false
      });

      if (rawData.length < 2) {
        alert('File appears to be empty or has incorrect format');
        setLoading(false);
        return;
      }

      const headers = rawData[1].map(h => String(h || '').trim()).filter(h => h);
      const dataRows = rawData.slice(2);

      const data = dataRows
        .filter(row => row && row.some(cell => cell !== "" && cell !== null))
        .map(row => {
          const obj = {};
          headers.forEach((header, index) => {
            obj[header] = row[index] !== undefined && row[index] !== null ? String(row[index]) : "";
          });
          return obj;
        });

      if (type === 'tickets') {
        setTicketData(data);
      } else {
        setReportData(data);
      }

      alert(`Successfully loaded ${data.length} records from ${file.name}`);
    } catch (err) {
      alert(`Error reading file: ${err.message}`);
      console.error('File upload error:', err);
    } finally {
      setLoading(false);
    }
  };

  const combinedData = useMemo(() => {
    if (reportData.length === 0) return [];

    const normalizeBarcode = (barcode) => {
      if (!barcode) return '';
      return String(barcode).trim().toUpperCase();
    };

    const ticketMap = new Map();
    ticketData.forEach(ticket => {
      const barcode = normalizeBarcode(ticket['Barcode']);
      if (barcode) {
        ticketMap.set(barcode, ticket);
      }
    });

    // Create category to PM mapping
    const categoryToPM = new Map();
    categoryMapping.forEach(item => {
      if (item.category && item.pm) {
        categoryToPM.set(item.category.trim().toUpperCase(), {
          pm: item.pm,
          department: item.department || '',
          categoryText: item.category_text || ''
        });
      }
    });

    // Track unmatched categories
    const unmatchedSet = new Set();

    const calculateAge = (dateStr) => {
      if (!dateStr) return '';
      try {
        const date = new Date(dateStr);
        const today = new Date();
        const diffTime = Math.abs(today - date);
        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
        return diffDays;
      } catch {
        return '';
      }
    };

    const result = reportData.map(report => {
      const reportBarcode = normalizeBarcode(report['Barcode#']);
      const ticket = ticketMap.get(reportBarcode) || {};
      const ticketNotes = ticket['Notes'] || '';

      // Look up PM based on category
      const category = (report['Category'] || '').trim().toUpperCase();
      const mappingInfo = categoryToPM.get(category);
      const assignedPM = mappingInfo ? mappingInfo.pm : '';

      // Track if category is unmatched
      if (category && !assignedPM) {
        unmatchedSet.add(report['Category'] || '');
      }

      return {
        'Meeting Note': '',
        'Requires Follow Up': false, // default boolean now
        'Assigned To': assignedPM,
        'Location': report['Repair Location'] || ticket['Location'] || '',
        'Repair Ticket': report['Ticket'] || '',
        'Asset Repair Age': calculateAge(report['Date In']),
        'Barcode#': report['Barcode#'] || ticket['Barcode'] || '',
        'Equipment': `(${report['Equipment']}) - ${report['Description']}`,
        'Damage Description': report['Notes'] || '',
        'Ticket Description': ticketNotes,
        'Repair Reason': report['Repair Reason'] || '',
        'Last Order#': report['Last Order#'] || ticket['Order# to Bill'] || '',
        'Reference#': report['Reference#'] || '',
        'Customer': report['Customer'] || ticket['Customer'] || '',
        'Customer Title': report['Customer Title'] || '',
        'Repair Cost': report['Repair Cost'] || '0',
        'Date In': report['Date In'] || ticket['Creation Date'] || '',
        'Department': report['Department'] || '',
        'Category': report['Category'] || '',
        'Billable': ticket['Billable'] || report['Billable'] || '',
        'Created By': ticket['Created By'] || report['User In'] || '',
        'Repair Price': report['Repair Price'] || '0',
        'Repair Vendor': report['Repair Vendor'] || '',
        '_TicketMatched': Object.keys(ticket).length > 0 ? 'Yes' : 'No'
      };
    });

    // Update unmatched categories
    setUnmatchedCategories(Array.from(unmatchedSet).sort());

    return result;
  }, [ticketData, reportData, categoryMapping]);

  const [editedCombinedData, setEditedCombinedData] = useState([]);

  useEffect(() => {
    const loadNotesFromFirebase = async () => {
      if (combinedData.length === 0) return;

      try {
        const updatedData = [...combinedData];

        for (let i = 0; i < updatedData.length; i++) {
          const barcode = updatedData[i]['Barcode#'];
          if (!barcode) continue;

          const docRef = doc(db, 'repairNotes', barcode);
          const docSnap = await getDoc(docRef);

          if (docSnap.exists()) {
            const data = docSnap.data();
            updatedData[i]['Meeting Note'] = data.meetingNote ?? '';
            // Accept boolean or string, normalize to boolean internally
            const rf = data.requiresFollowUp;
            updatedData[i]['Requires Follow Up'] = typeof rf === 'boolean' ? rf : !!rf;
          }
        }

        setEditedCombinedData(updatedData);
        console.log('Loaded notes from Firebase');
      } catch (error) {
        console.error('Error loading notes:', error);
        setEditedCombinedData(combinedData);
      }
    };

    loadNotesFromFirebase();
  }, [combinedData]);

  /** Key-based updater: target rows by Barcode# */
  const handleCellEdit = (rowKey, column, value) => {
    setEditedCombinedData(prevData => {
      const idx = prevData.findIndex(r => r['Barcode#'] === rowKey);
      if (idx === -1) return prevData;
      const updated = [...prevData];
      updated[idx] = { ...updated[idx], [column]: value };
      return updated;
    });
    setHasUnsavedChanges(true);
  };

  const saveNotesToFirebase = async () => {
    setSaving(true);
    try {
      const savePromises = editedCombinedData.map(async (row) => {
        const barcode = row['Barcode#'];
        if (!barcode) return;

        const docRef = doc(db, 'repairNotes', barcode);

        try {
          await setDoc(docRef, {
            barcode: barcode,
            meetingNote: row['Meeting Note'] || '',
            requiresFollowUp: !!row['Requires Follow Up'], // save as boolean
            lastUpdated: new Date().toISOString()
          }, { merge: true });
        } catch (error) {
          console.error(`Error saving note for ${barcode}:`, error);
        }
      });

      await Promise.all(savePromises);
      setLastSaved(new Date());
      setHasUnsavedChanges(false);
      alert('Notes saved successfully to Firebase!');
    } catch (error) {
      console.error('Error saving notes:', error);
      alert('Error saving notes. Please try again.');
    } finally {
      setSaving(false);
    }
  };

  /** Use deferred value to smooth typing vs. heavy recomputes */
  const deferredCombined = useDeferredValue(editedCombinedData);

  const getCurrentData = () => {
    switch (activeTab) {
      case 'tickets': return ticketData;
      case 'reports': return reportData;
      case 'combined': return deferredCombined; // use deferred dataset
      case 'diagnostics': return [];
      default: return [];
    }
  };

  const currentData = getCurrentData();
  const columns = currentData.length > 0 ? Object.keys(currentData[0]).filter(col => !col.startsWith('_')) : [];

  const uniqueLocations = useMemo(() => {
    const locations = new Set();
    currentData.forEach(row => {
      const location = row['Location'] || row['Repair Location'];
      if (location && location.trim()) {
        locations.add(location.trim());
      }
    });
    return Array.from(locations).sort();
  }, [currentData]);

  const uniquePMs = useMemo(() => {
    const pms = new Set();
    editedCombinedData.forEach(row => {
      const pm = row['Assigned To'];
      if (pm && pm.trim()) {
        pms.add(pm.trim());
      }
    });
    return Array.from(pms).sort();
  }, [editedCombinedData]);

  // Calculate workload by PM
  const pmWorkload = useMemo(() => {
    const workload = {};
    editedCombinedData.forEach(row => {
      const pm = row['Assigned To'] || 'Unassigned';
      if (!workload[pm]) {
        workload[pm] = {
          count: 0,
          totalCost: 0,
          avgAge: 0,
          ages: []
        };
      }
      workload[pm].count++;

      const cost = parseFloat(row['Repair Cost']) || 0;
      workload[pm].totalCost += cost;

      const age = parseInt(row['Asset Repair Age']) || 0;
      if (age > 0) {
        workload[pm].ages.push(age);
      }
    });

    // Calculate average ages
    Object.keys(workload).forEach(pm => {
      if (workload[pm].ages.length > 0) {
        const sum = workload[pm].ages.reduce((a, b) => a + b, 0);
        workload[pm].avgAge = Math.round(sum / workload[pm].ages.length);
      }
    });

    return workload;
  }, [editedCombinedData]);

  // Get all unique categories from report data
  const allCategories = useMemo(() => {
    const cats = new Set();
    reportData.forEach(report => {
      const category = report['Category'];
      if (category && category.trim()) {
        cats.add(category.trim());
      }
    });
    return Array.from(cats).sort();
  }, [reportData]);

  const addCategoryMapping = (category, pm, department = '', categoryText = '') => {
    const newMapping = [...categoryMapping];
    const existingIndex = newMapping.findIndex(
      m => m.category.trim().toUpperCase() === category.trim().toUpperCase()
    );

    if (existingIndex >= 0) {
      newMapping[existingIndex] = {
        category: category.trim(),
        pm: pm.trim(),
        department: department.trim(),
        category_text: categoryText.trim()
      };
    } else {
      newMapping.push({
        category: category.trim(),
        pm: pm.trim(),
        department: department.trim(),
        category_text: categoryText.trim()
      });
    }

    setCategoryMapping(newMapping);
    setHasUnsavedChanges(true);
  };

  const removeCategoryMapping = (category) => {
    setCategoryMapping(prev =>
      prev.filter(m => m.category.trim().toUpperCase() !== category.trim().toUpperCase())
    );
    setHasUnsavedChanges(true);
  };

  const exportCategoryMapping = () => {
    const json = JSON.stringify(categoryMapping, null, 2);
    const blob = new Blob([json], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `category_mapping_${new Date().toISOString().split('T')[0]}.json`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const filteredAndSortedData = useMemo(() => {
    let filtered = currentData;

    if (locationFilter) {
      filtered = filtered.filter(row => {
        const location = row['Location'] || row['Repair Location'];
        return location === locationFilter;
      });
    }

    if (pmFilter) {
      filtered = filtered.filter(row => {
        if (pmFilter === '__unassigned__') {
          return !row['Assigned To'] || row['Assigned To'] === '';
        }
        return row['Assigned To'] === pmFilter;
      });
    }

    if (searchTerm) {
      filtered = filtered.filter(row =>
        Object.values(row).some(val =>
          String(val).toLowerCase().includes(searchTerm.toLowerCase())
        )
      );
    }

    if (sortConfig.key) {
      filtered = [...filtered].sort((a, b) => {
        const aVal = a[sortConfig.key];
        const bVal = b[sortConfig.key];
        if (aVal === bVal) return 0;
        const comparison = aVal > bVal ? 1 : -1;
        return sortConfig.direction === 'asc' ? comparison : -comparison;
      });
    }

    return filtered;
  }, [currentData, searchTerm, locationFilter, pmFilter, sortConfig]);

  const handleSort = (key) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  const formatCell = (value) => {
    if (!value && value !== 0) return '';
    const str = String(value);

    if (str.includes('T') && str.includes('Z')) {
      try {
        const date = new Date(str);
        if (!isNaN(date.getTime())) {
          return date.toLocaleDateString();
        }
      } catch {}
    }

    const num = parseFloat(str.replace(/,/g, ''));
    if (!isNaN(num) && str.match(/^[\d,\.]+$/)) {
      if (num === Math.floor(num)) {
        return Math.floor(num).toString();
      }
      return num.toString();
    }

    return str;
  };

  const exportToCSV = () => {
    const headers = columns.join(',');
    const rows = filteredAndSortedData.map(row =>
      columns.map(col => {
        const value = row[col];
        const formattedValue =
          col === 'Requires Follow Up' ? (value ? 'Yes' : 'No') : formatCell(value);
        return `"${String(formattedValue || '').replace(/"/g, '""')}"`;
      }).join(',')
    );
    const csv = [headers, ...rows].join('\n');

    const blob = new Blob([csv], { type: 'text/csv' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${activeTab}_export_${new Date().toISOString().split('T')[0]}.csv`;
    a.click();
    URL.revokeObjectURL(url);
  };

  const hasData = ticketData.length > 0 || reportData.length > 0;

  const CategoryManager = () => {
    const [newCategory, setNewCategory] = useState('');
    const [newPM, setNewPM] = useState('');
    const [newDepartment, setNewDepartment] = useState('');
    const [newCategoryText, setNewCategoryText] = useState('');

    return (
      <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50 p-4">
        <div className="bg-white rounded-lg shadow-xl max-w-6xl w-full max-h-[90vh] overflow-hidden flex flex-col">
          <div className="p-6 border-b border-gray-200 flex justify-between items-center">
            <h2 className="text-2xl font-bold text-gray-800">Category to PM Mapping Manager</h2>
            <button
              onClick={() => setShowCategoryManager(false)}
              className="text-gray-500 hover:text-gray-700 text-2xl"
            >
              ×
            </button>
          </div>

          <div className="p-6 space-y-6 overflow-y-auto flex-1">
            {/* Add New Mapping */}
            <div className="bg-blue-50 p-4 rounded-lg">
              <h3 className="font-semibold text-blue-900 mb-3">Add New Mapping</h3>
              <div className="grid grid-cols-2 gap-3 mb-3">
                <div>
                  <label className="text-xs text-gray-600 mb-1 block">Category Code *</label>
                  <select
                    value={newCategory}
                    onChange={(e) => setNewCategory(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  >
                    <option value="">Select Category</option>
                    {allCategories.map(cat => (
                      <option key={cat} value={cat}>{cat}</option>
                    ))}
                  </select>
                </div>
                <div>
                  <label className="text-xs text-gray-600 mb-1 block">PM Name *</label>
                  <input
                    type="text"
                    placeholder="PM Name"
                    value={newPM}
                    onChange={(e) => setNewPM(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                </div>
                <div>
                  <label className="text-xs text-gray-600 mb-1 block">Department</label>
                  <input
                    type="text"
                    placeholder="Department (optional)"
                    value={newDepartment}
                    onChange={(e) => setNewDepartment(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                </div>
                <div>
                  <label className="text-xs text-gray-600 mb-1 block">Category Description</label>
                  <input
                    type="text"
                    placeholder="Category description (optional)"
                    value={newCategoryText}
                    onChange={(e) => setNewCategoryText(e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg"
                  />
                </div>
              </div>
              <button
                onClick={() => {
                  if (newCategory && newPM) {
                    addCategoryMapping(newCategory, newPM, newDepartment, newCategoryText);
                    setNewCategory('');
                    setNewPM('');
                    setNewDepartment('');
                    setNewCategoryText('');
                  }
                }}
                disabled={!newCategory || !newPM}
                className="w-full px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50"
              >
                Add Mapping
              </button>
            </div>

            {/* Unmatched Categories Warning */}
            {unmatchedCategories.length > 0 && (
              <div className="bg-red-50 p-4 rounded-lg">
                <h3 className="font-semibold text-red-900 mb-2">⚠️ Unmatched Categories ({unmatchedCategories.length})</h3>
                <p className="text-sm text-red-800 mb-3">These categories don't have PM assignments:</p>
                <div className="flex flex-wrap gap-2">
                  {unmatchedCategories.map(cat => (
                    <span key={cat} className="px-3 py-1 bg-red-100 text-red-800 rounded-full text-sm">
                      {cat}
                    </span>
                  ))}
                </div>
              </div>
            )}

            {/* Current Mappings */}
            <div>
              <div className="flex justify-between items-center mb-3">
                <h3 className="font-semibold text-gray-800">Current Mappings ({categoryMapping.length})</h3>
                <button
                  onClick={exportCategoryMapping}
                  className="text-sm px-3 py-1 bg-gray-600 text-white rounded hover:bg-gray-700"
                >
                  Export JSON
                </button>
              </div>
              <div className="space-y-2 max-h-96 overflow-y-auto">
                {categoryMapping.map((mapping, idx) => (
                  <div key={idx} className="flex items-start justify-between p-4 bg-gray-50 rounded-lg border border-gray-200">
                    <div className="flex-1 space-y-1">
                      <div className="flex items-center gap-2">
                        <span className="font-bold text-gray-900">{mapping.category}</span>
                        <span className="text-gray-400">→</span>
                        <span className="font-semibold text-blue-600">{mapping.pm}</span>
                      </div>
                      {mapping.category_text && (
                        <p className="text-sm text-gray-600">📝 {mapping.category_text}</p>
                      )}
                      {mapping.department && (
                        <p className="text-xs text-gray-500">🏢 Department: {mapping.department}</p>
                      )}
                    </div>
                    <button
                      onClick={() => removeCategoryMapping(mapping.category)}
                      className="text-red-600 hover:text-red-800 text-sm ml-4"
                    >
                      Remove
                    </button>
                  </div>
                ))}
              </div>
            </div>

            {/* All Categories List */}
            <div>
              <h3 className="font-semibold text-gray-800 mb-3">All Categories in Data ({allCategories.length})</h3>
              <div className="flex flex-wrap gap-2">
                {allCategories.map(cat => {
                  const hasMapping = categoryMapping.some(
                    m => m.category.trim().toUpperCase() === cat.trim().toUpperCase()
                  );
                  return (
                    <span
                      key={cat}
                      className={`px-3 py-1 rounded-full text-sm ${
                        hasMapping
                          ? 'bg-green-100 text-green-800'
                          : 'bg-gray-100 text-gray-800'
                      }`}
                    >
                      {cat} {hasMapping && '✓'}
                    </span>
                  );
                })}
              </div>
            </div>
          </div>
        </div>
      </div>
    );
  };

  return (
    <div className="w-full h-screen flex flex-col bg-gray-50">
      <div className="bg-white border-b border-gray-200 px-6 py-4">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-2xl font-bold text-gray-800">Repair Tracker Dashboard</h1>
            <p className="text-sm text-gray-500 mt-1">Manage repair tickets and reports</p>
          </div>

          <div className="flex gap-2 items-center">
            {lastSaved && (
              <span className="text-xs text-gray-500 flex items-center gap-1">
                <Cloud size={14} />
                Last saved: {lastSaved.toLocaleTimeString()}
              </span>
            )}

            {hasData && (
              <button
                onClick={() => setShowCategoryManager(true)}
                className="flex items-center gap-2 px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700 cursor-pointer transition-colors text-sm"
              >
                📚 Manage Categories
                {unmatchedCategories.length > 0 && (
                  <span className="bg-red-500 text-white px-2 py-0.5 rounded-full text-xs">
                    {unmatchedCategories.length}
                  </span>
                )}
              </button>
            )}

            {activeTab === 'combined' && editedCombinedData.length > 0 && (
              <button
                onClick={saveNotesToFirebase}
                disabled={saving}
                className={`flex items-center gap-2 px-4 py-2 text-white rounded-lg cursor-pointer transition-colors text-sm disabled:opacity-50 ${
                  hasUnsavedChanges ? 'bg-orange-600 hover:bg-orange-700 animate-pulse' : 'bg-green-600 hover:bg-green-700'
                }`}
              >
                <Save size={16} />
                {saving ? 'Saving...' : hasUnsavedChanges ? 'Save Changes' : 'Save Notes'}
              </button>
            )}

            <label className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 cursor-pointer transition-colors text-sm">
              <Upload size={16} />
              Upload Category JSON
              <input
                type="file"
                accept=".json"
                onChange={(e) => handleFileUpload(e, 'mapping')}
                className="hidden"
                disabled={loading}
              />
            </label>

            <label className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer transition-colors text-sm">
              <Upload size={16} />
              {ticketData.length > 0 ? 'Reload' : 'Upload'} Ticket List
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={(e) => handleFileUpload(e, 'tickets')}
                className="hidden"
                disabled={loading}
              />
            </label>
            <label className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 cursor-pointer transition-colors text-sm">
              <Upload size={16} />
              {reportData.length > 0 ? 'Reload' : 'Upload'} Repair Report
              <input
                type="file"
                accept=".xlsx,.xls"
                onChange={(e) => handleFileUpload(e, 'reports')}
                className="hidden"
                disabled={loading}
              />
            </label>
          </div>
        </div>
      </div>

      <div className="bg-white border-b border-gray-200">
        <div className="flex px-6 overflow-x-auto">
          <button
            onClick={() => setActiveTab('combined')}
            className={`px-6 py-3 font-medium border-b-2 transition-colors whitespace-nowrap ${
              activeTab === 'combined'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Combined Report
            <span className="ml-2 text-xs bg-gray-100 px-2 py-1 rounded-full">
              {editedCombinedData.length}
            </span>
          </button>
          <button
            onClick={() => setActiveTab('tickets')}
            className={`px-6 py-3 font-medium border-b-2 transition-colors whitespace-nowrap ${
              activeTab === 'tickets'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Repair Ticket List
            <span className="ml-2 text-xs bg-gray-100 px-2 py-1 rounded-full">
              {ticketData.length}
            </span>
          </button>
          <button
            onClick={() => setActiveTab('reports')}
            className={`px-6 py-3 font-medium border-b-2 transition-colors whitespace-nowrap ${
              activeTab === 'reports'
                ? 'border-blue-500 text-blue-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            Repair Report
            <span className="ml-2 text-xs bg-gray-100 px-2 py-1 rounded-full">
              {reportData.length}
            </span>
          </button>
          <button
            onClick={() => setActiveTab('diagnostics')}
            className={`px-6 py-3 font-medium border-b-2 transition-colors whitespace-nowrap ${
              activeTab === 'diagnostics'
                ? 'border-orange-500 text-orange-600'
                : 'border-transparent text-gray-500 hover:text-gray-700'
            }`}
          >
            🔍 Diagnostics
          </button>
        </div>
      </div>

      {hasData && activeTab !== 'diagnostics' && (
        <div className="bg-white border-b border-gray-200 px-6 py-3">
          <div className="flex items-center justify-between mb-3">
            <div className="flex-1 relative">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400" size={18} />
              <input
                type="text"
                placeholder="Search across all columns..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>

            <div className="flex items-center gap-2 ml-4">
              <select
                value={locationFilter}
                onChange={(e) => setLocationFilter(e.target.value)}
                className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white min-w-[180px]"
              >
                <option value="">All Locations</option>
                {uniqueLocations.map(location => (
                  <option key={location} value={location}>
                    {location}
                  </option>
                ))}
              </select>

              {locationFilter && (
                <button
                  onClick={() => setLocationFilter('')}
                  className="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors"
                >
                  Clear
                </button>
              )}

              {activeTab === 'combined' && (
                <>
                  <select
                    value={pmFilter}
                    onChange={(e) => setPmFilter(e.target.value)}
                    className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white min-w-[200px]"
                  >
                    <option value="">All Assigned To</option>
                    <option value="__unassigned__">🔴 Unassigned</option>
                    {uniquePMs.map(pm => (
                      <option key={pm} value={pm}>
                        {pm}
                      </option>
                    ))}
                  </select>

                  {pmFilter && (
                    <button
                      onClick={() => setPmFilter('')}
                      className="px-3 py-2 text-sm text-gray-600 hover:text-gray-800 hover:bg-gray-100 rounded-lg transition-colors"
                    >
                      Clear
                    </button>
                  )}
                </>
              )}
            </div>

            <div className="flex items-center gap-2 ml-4">
              <button
                onClick={() => setWrapText(!wrapText)}
                className={`px-4 py-2 border rounded-lg transition-colors text-sm ${
                  wrapText
                    ? 'bg-blue-600 text-white border-blue-600 hover:bg-blue-700'
                    : 'bg-white text-gray-700 border-gray-300 hover:bg-gray-50'
                }`}
              >
                {wrapText ? 'Unwrap' : 'Wrap'} Text
              </button>

              <button
                onClick={exportToCSV}
                disabled={currentData.length === 0}
                className="flex items-center gap-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50"
              >
                <Download size={18} />
                Export
              </button>
            </div>
          </div>

          {activeTab === 'combined' && (
            <div className="flex items-center gap-4 text-xs text-gray-500">
              <span>
                📊 Total: {editedCombinedData.length} items
              </span>
              <span className="text-green-600">
                ✅ Assigned: {editedCombinedData.filter(row => row['Assigned To'] && row['Assigned To'] !== '').length}
              </span>
              <span className="text-red-600 font-semibold">
                🔴 Unassigned: {editedCombinedData.filter(row => !row['Assigned To'] || row['Assigned To'] === '').length}
              </span>
              {categoryMapping.length > 0 && (
                <span className="text-purple-600">
                  📚 {categoryMapping.length} category mappings
                </span>
              )}
              {unmatchedCategories.length > 0 && (
                <span className="text-orange-600 font-semibold">
                  ⚠️ {unmatchedCategories.length} categories without PM
                </span>
              )}
              <span className="text-blue-600">
                📈 {uniquePMs.length} unique PMs
              </span>
            </div>
          )}
        </div>
      )}

      <div className="flex-1 overflow-hidden px-6 py-4">
        {loading ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center">
              <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
              <p className="text-gray-500">Loading file...</p>
            </div>
          </div>
        ) : activeTab === 'diagnostics' ? (
          <div className="max-w-6xl mx-auto space-y-6 overflow-y-auto h-full pb-8">
            <div className="bg-white p-6 rounded-lg shadow">
              <h2 className="text-xl font-semibold text-gray-800 mb-4">Data Matching Diagnostics</h2>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                <div className="p-4 bg-blue-50 rounded-lg">
                  <h3 className="font-semibold text-blue-900 mb-2">📋 Repair Ticket List</h3>
                  <p className="text-2xl font-bold text-blue-800">{ticketData.length}</p>
                  <p className="text-sm text-blue-700">records</p>
                </div>

                <div className="p-4 bg-green-50 rounded-lg">
                  <h3 className="font-semibold text-green-900 mb-2">🔧 Repair Report</h3>
                  <p className="text-2xl font-bold text-green-800">{reportData.length}</p>
                  <p className="text-sm text-green-700">records</p>
                </div>

                <div className="p-4 bg-purple-50 rounded-lg">
                  <h3 className="font-semibold text-purple-900 mb-2">📚 Category Mappings</h3>
                  <p className="text-2xl font-bold text-purple-800">{categoryMapping.length}</p>
                  <p className="text-sm text-purple-700">categories mapped</p>
                </div>
              </div>

              {/* Category Mapping Status */}
              <div className="p-4 bg-gray-50 rounded-lg mb-6">
                <h3 className="font-semibold text-gray-900 mb-3">Category Mapping Status</h3>
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Total Categories in Data</p>
                    <p className="text-xl font-bold text-gray-800">{allCategories.length}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Categories with PM Assignment</p>
                    <p className="text-xl font-bold text-green-600">
                      {allCategories.length - unmatchedCategories.length}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Unmatched Categories</p>
                    <p className="text-xl font-bold text-red-600">{unmatchedCategories.length}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Coverage</p>
                    <p className="text-xl font-bold text-blue-600">
                      {allCategories.length > 0
                        ? Math.round(((allCategories.length - unmatchedCategories.length) / allCategories.length) * 100)
                        : 0}%
                    </p>
                  </div>
                </div>

                {unmatchedCategories.length > 0 && (
                  <div className="mt-4 p-3 bg-red-50 rounded border border-red-200">
                    <p className="text-sm font-semibold text-red-900 mb-2">⚠️ Unmatched Categories:</p>
                    <div className="flex flex-wrap gap-2">
                      {unmatchedCategories.map(cat => (
                        <span key={cat} className="px-2 py-1 bg-red-100 text-red-800 rounded text-xs">
                          {cat}
                        </span>
                      ))}
                    </div>
                  </div>
                )}
              </div>

              {/* PM Workload Statistics */}
              {editedCombinedData.length > 0 && (
                <div className="p-4 bg-indigo-50 rounded-lg">
                  <h3 className="font-semibold text-indigo-900 mb-4">👥 Workload by Assigned PM</h3>
                  <div className="space-y-3">
                    {Object.entries(pmWorkload)
                      .sort((a, b) => b[1].count - a[1].count)
                      .map(([pm, stats]) => (
                        <div key={pm} className="p-3 bg-white rounded-lg shadow-sm">
                          <div className="flex justify-between items-start mb-2">
                            <span className={`font-semibold ${pm === 'Unassigned' ? 'text-red-600' : 'text-gray-800'}`}>
                              {pm === 'Unassigned' ? '🔴 ' + pm : pm}
                            </span>
                            <span className="text-lg font-bold text-indigo-600">{stats.count} items</span>
                          </div>
                          <div className="grid grid-cols-3 gap-2 text-sm">
                            <div>
                              <span className="text-gray-600">Total Cost:</span>
                              <p className="font-semibold">${stats.totalCost.toFixed(2)}</p>
                            </div>
                            <div>
                              <span className="text-gray-600">Avg Age:</span>
                              <p className="font-semibold">{stats.avgAge} days</p>
                            </div>
                            <div>
                              <span className="text-gray-600">Workload %:</span>
                              <p className="font-semibold">
                                {((stats.count / editedCombinedData.length) * 100).toFixed(1)}%
                              </p>
                            </div>
                          </div>
                          {/* Progress bar */}
                          <div className="mt-2 h-2 bg-gray-200 rounded-full overflow-hidden">
                            <div
                              className={`h-full ${pm === 'Unassigned' ? 'bg-red-500' : 'bg-indigo-500'}`}
                              style={{ width: `${(stats.count / editedCombinedData.length) * 100}%` }}
                            />
                          </div>
                        </div>
                      ))}
                  </div>
                </div>
              )}

              {categoryMapping.length > 0 && (
                <div className="mt-6 p-4 bg-purple-50 rounded-lg">
                  <h3 className="font-semibold text-purple-900 mb-3">Sample Category Mappings</h3>
                  <div className="space-y-2">
                    {categoryMapping.slice(0, 10).map((item, idx) => (
                      <div key={idx} className="p-3 bg-white rounded border border-purple-100">
                        <div className="flex justify-between items-start mb-1">
                          <span className="font-bold text-purple-900">{item.category}</span>
                          <span className="text-purple-600 font-semibold">→ {item.pm}</span>
                        </div>
                        {item.category_text && (
                          <p className="text-xs text-purple-700">📝 {item.category_text}</p>
                        )}
                        {item.department && (
                          <p className="text-xs text-purple-600">🏢 {item.department}</p>
                        )}
                      </div>
                    ))}
                    {categoryMapping.length > 10 && (
                      <p className="text-xs text-purple-700 italic mt-2">
                        ... and {categoryMapping.length - 10} more mappings
                      </p>
                    )}
                  </div>
                </div>
              )}
            </div>
          </div>
        ) : !hasData ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center max-w-lg bg-white p-12 rounded-lg shadow-lg">
              <FileSpreadsheet className="mx-auto text-blue-500 mb-6" size={64} />
              <h3 className="text-2xl font-semibold text-gray-800 mb-3">Welcome to Repair Tracker</h3>
              <p className="text-gray-600 mb-6">Upload your files to get started:</p>
              <ol className="text-left text-sm text-gray-600 space-y-2">
                <li>1. Upload Category JSON (purple button)</li>
                <li>2. Upload Ticket List Excel</li>
                <li>3. Upload Repair Report Excel</li>
              </ol>
            </div>
          </div>
        ) : currentData.length === 0 ? (
          <div className="flex items-center justify-center h-full">
            <div className="text-center bg-white p-8 rounded-lg shadow">
              <p className="text-gray-500">No data available</p>
            </div>
          </div>
        ) : (
          <div className="bg-white rounded-lg shadow h-full overflow-auto">
            <table className="w-full border-collapse">
              <thead className="bg-gray-50 border-b border-gray-200 sticky top-0 z-10">
                <tr>
                  {columns.map((col) => {
                    const isEditable = activeTab === 'combined' && (col === 'Meeting Note' || col === 'Requires Follow Up' || col === 'Assigned To');
                    return (
                      <th
                        key={col}
                        onClick={() => handleSort(col)}
                        className={`px-4 py-3 text-left text-xs font-medium text-gray-700 uppercase tracking-wider cursor-pointer hover:bg-gray-100 bg-gray-50 ${
                          wrapText ? 'whitespace-normal' : 'whitespace-nowrap'
                        }`}
                      >
                        <div className="flex items-center gap-2">
                          {col}
                          {isEditable && <span className="text-blue-500">✏️</span>}
                          {sortConfig.key === col && (
                            sortConfig.direction === 'asc' ? <ChevronUp size={14} /> : <ChevronDown size={14} />
                          )}
                        </div>
                      </th>
                    );
                  })}
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {filteredAndSortedData.map((row, idx) => {
                  const hasAssignment = row['Assigned To'] && row['Assigned To'] !== '';
                  const rowBgColor = activeTab === 'combined' && !hasAssignment ? 'bg-red-50' : '';

                  return (
                    <tr key={row['Barcode#'] || idx} className={`hover:bg-gray-50 ${rowBgColor}`}>
                      {columns.map((col) => {
                        const isTextEditable = activeTab === 'combined' && (col === 'Meeting Note' || col === 'Requires Follow Up');
                        const isPMEditable = activeTab === 'combined' && col === 'Assigned To';
                        const isRequires = activeTab === 'combined' && col === 'Requires Follow Up';
                        const cellValue = row[col];
                        const isEditing =
                          editingCell?.rowKey === row['Barcode#'] && editingCell?.column === col;

                        return (
                          <td
                            key={col}
                            className={`px-4 py-3 text-sm text-gray-900 ${
                              wrapText ? 'whitespace-normal break-words' : 'whitespace-nowrap'
                            } ${(isTextEditable || isPMEditable) ? 'cursor-text' : ''}`}
                            style={wrapText ? { maxWidth: '300px' } : undefined}
                            onClick={() => {
                              if (isTextEditable || isPMEditable) {
                                setEditingCell({ rowKey: row['Barcode#'], column: col });
                              }
                            }}
                          >
                            {isPMEditable && isEditing ? (
                              <select
                                autoFocus
                                value={cellValue}
                                onChange={(e) => handleCellEdit(row['Barcode#'], col, e.target.value)}
                                onBlur={() => setEditingCell(null)}
                                className="w-full p-2 border border-blue-500 rounded focus:outline-none focus:ring-2 focus:ring-blue-500"
                              >
                                <option value="">-- Unassigned --</option>
                                {uniquePMs.map(pm => (
                                  <option key={pm} value={pm}>{pm}</option>
                                ))}
                              </select>
                            ) : isPMEditable ? (
                              <div className={`min-h-[40px] p-2 border border-transparent hover:border-gray-300 rounded flex items-center ${
                                !cellValue ? 'text-red-600 font-semibold' : 'text-gray-900'
                              }`}>
                                {cellValue || '🔴 Click to assign'}
                              </div>
                            ) : isRequires && isEditing ? (
                              <input
                                autoFocus
                                type="checkbox"
                                checked={!!cellValue}
                                onChange={(e) => handleCellEdit(row['Barcode#'], col, e.target.checked)}
                                onBlur={() => setEditingCell(null)}
                                className="h-4 w-4"
                              />
                            ) : isRequires ? (
                              <div
                                className="min-h-[40px] p-2 border border-transparent hover:border-gray-300 rounded flex items-center cursor-pointer select-none"
                                onClick={() => setEditingCell({ rowKey: row['Barcode#'], column: col })}
                              >
                                {cellValue ? '✅ Yes' : '⬜ No'}
                              </div>
                            ) : isTextEditable && isEditing ? (
                              <TextCell
                                rowKey={row['Barcode#']}
                                column={col}
                                initialValue={cellValue}
                                onCommit={(rk, c, v) => {
                                  handleCellEdit(rk, c, v);
                                  setEditingCell(null);
                                }}
                                onCancel={() => setEditingCell(null)}
                              />
                            ) : isTextEditable ? (
                              <div
                                className={`min-h-[40px] p-2 border border-transparent hover:border-gray-300 rounded whitespace-pre-wrap ${
                                  !cellValue ? 'text-gray-400 italic' : ''
                                }`}
                              >
                                {cellValue || 'Click to add note...'}
                              </div>
                            ) : (
                              col === 'Requires Follow Up'
                                ? (cellValue ? 'Yes' : 'No')
                                : formatCell(cellValue)
                            )}
                          </td>
                        );
                      })}
                    </tr>
                  );
                })}
              </tbody>
            </table>
          </div>
        )}
      </div>

      {hasData && activeTab !== 'diagnostics' && (
        <div className="bg-white border-t border-gray-200 px-6 py-3">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>Showing {filteredAndSortedData.length} of {currentData.length} records</span>
            <div className="flex items-center gap-4">
              {locationFilter && (
                <span className="text-blue-600">Location: {locationFilter}</span>
              )}
              {pmFilter && (
                <span className="text-green-600">
                  Assigned To: {pmFilter === '__unassigned__' ? 'Unassigned' : pmFilter}
                </span>
              )}
              {searchTerm && (
                <span className="text-blue-600">Search: "{searchTerm}"</span>
              )}
            </div>
          </div>
        </div>
      )}

      {showCategoryManager && <CategoryManager />}
    </div>
  );
};

export default RepairTrackerSheet;
